library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(x = training, thresh = 0.8)
substr(colnames(training), start = 1, stop = 2)
preProcess(x = training[,which(substr(colnames(training), start = 1, stop = 2) == "IL"], thresh = 0.8)
preProcess(x = training[,which(substr(colnames(training), start = 1, stop = 2) == "IL")], thresh = 0.8)
p <- preProcess(x = training[,which(substr(colnames(training), start = 1, stop = 2) == "IL")], thresh = 0.8)
p
which(substr(colnames(training), start = 1, stop = 2) == "IL")
p <- preProcess(x = training[,which(substr(colnames(training), start = 1, stop = 2) == "IL")], thresh = 80)
p
?preProcess
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
summary(training$Superplasticizer)
75/6000
400/25000
1200*0.06
setwd("~/Coursera/Machine Learning")
train <- read.csv("~/Coursera/Machine Learning/training.csv")
View(train)
summary(train)
summary(train$classe)
library(randomForest)
resp.col <- which(colnames(train) == "classe")
resp.col
resp.col <- which(colnames(train) == "classe")
randomForest(x = train[,-resp.col], y = train[,resp.col])
nrow(na.omit(train))
nrow(complete.cases(train))
complete.cases(train)
which(NA %in% train)
resp.col <- which(colnames(train) == "classe")
which(NA %in% train)
summary(train)
is.na(train$var_yaw_forearm)
apply(train, MARGIN = 2, is.na)
apply(train, MARGIN = 2, function(x) length(is.na(x)))
apply(train, MARGIN = 2, function(x) length(which(is.na(x))))
good.cols <- which(apply(train, MARGIN = 2, function(x) length(which(is.na(x))))/19622 < 0.5)
good.cols
train <- train[,good.cols]
complete.cases(train)
train <- train[which(complete.cases(train)), ]
train
library(randomForest)
resp.col <- which(colnames(train) == "classe")
randomForest(x = train[,-resp.col], y = train[,resp.col])
str(train)
train <- read.csv("~/Coursera/Machine Learning/training.csv")
summary(train)
apply(train, 2, function(x) which(x) == "#DIV/0!")
apply(train, 2, function(x) which(x == "#DIV/0!"))
summary(train)
apply(train, 2, function(x) which(x == ""))
div.zero <-  apply(train, 2, function(x) which(x == "#DIV/0!"))
empty <- apply(train, 2, function(x) which(x == ""))
cols <- 1:ncol(train)
cols <- 1:ncol(train)
for(i in cols){
train[,i][div.zero[[i]]] <- NA
train[,i][empty[[i]]] <- NA
}
summary(train)
train <- read.csv("~/Coursera/Machine Learning/training.csv", stringsAsFactors = F)
summary(train)
div.zero <-  apply(train, 2, function(x) which(x == "#DIV/0!"))
empty <- apply(train, 2, function(x) which(x == ""))
cols <- 1:ncol(train)
for(i in cols){
train[,i][div.zero[[i]]] <- NA
train[,i][empty[[i]]] <- NA
}
summary(train)
good.cols <- which(apply(train, MARGIN = 2, function(x) length(which(is.na(x))))/19622 < 0.5)
length(good.cols)
train <- train[,good.cols]
length(which(complete.cases(train)))
train <- train[which(complete.cases(train)), ]
library(randomForest)
resp.col <- which(colnames(train) == "classe")
str(train)
randomForest(x = train[,-resp.col], y = train[,resp.col])
train$classe <- as.factor(train$classe)
randomForest(x = train[,-resp.col], y = train[,resp.col])
summary(train)
train$user_name
summary(train)
train$new_window
train$cvtd_timestamp
bad.cols <- which(colnames(train) %in% c("user_name", "new_window", "cvtd_timestamp"))
bad.cols
train <- train[,-bad.cols]
summary(train)
resp.col <- which(colnames(train) == "classe")
randomForest(x = train[,-resp.col], y = train[,resp.col])
train_inds <- sample(1:nrow(train), size = nrow(train) * 0.5, replace = F)
test <- train[-train_inds, ]
train <- train[train_inds, ]
resp.col <- which(colnames(train) == "classe")
randomForest(x = train[,-resp.col], y = train[,resp.col], xtest = test[,-resp.col], ytest = test[,resp.col])
